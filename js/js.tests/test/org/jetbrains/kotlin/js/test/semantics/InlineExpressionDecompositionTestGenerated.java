/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.InnerTestClasses;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class InlineExpressionDecompositionTestGenerated extends AbstractInlineExpressionDecompositionTest {
    public void testAllFilesPresentInCases() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/inlineExpressionDecomposition/cases"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("argumentOfCall.kt")
    public void testArgumentOfCall() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/argumentOfCall.kt");
        doTest(fileName);
    }

    @TestMetadata("argumentOfNew.kt")
    public void testArgumentOfNew() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/argumentOfNew.kt");
        doTest(fileName);
    }

    @TestMetadata("arrayAccess.kt")
    public void testArrayAccess() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/arrayAccess.kt");
        doTest(fileName);
    }

    @TestMetadata("arrayLiteral.kt")
    public void testArrayLiteral() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/arrayLiteral.kt");
        doTest(fileName);
    }

    @TestMetadata("binaryOperator.kt")
    public void testBinaryOperator() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/binaryOperator.kt");
        doTest(fileName);
    }

    @TestMetadata("conditional.kt")
    public void testConditional() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/conditional.kt");
        doTest(fileName);
    }

    @TestMetadata("logicalAnd.kt")
    public void testLogicalAnd() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/logicalAnd.kt");
        doTest(fileName);
    }

    @TestMetadata("logicalOr.kt")
    public void testLogicalOr() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/logicalOr.kt");
        doTest(fileName);
    }

    @TestMetadata("switch.kt")
    public void testSwitch() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/switch.kt");
        doTest(fileName);
    }

    @TestMetadata("while.kt")
    public void testWhile() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("js/js.translator/testData/inlineExpressionDecomposition/cases/while.kt");
        doTest(fileName);
    }
}
